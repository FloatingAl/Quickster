{"map":"{\"version\":3,\"sources\":[\"/home/albara/Desktop/Repositories/Quickster/src/google_api_key.js\",\"/home/albara/Desktop/Repositories/Quickster/src/ButtonToggle.js\",\"/home/albara/Desktop/Repositories/Quickster/src/App.js\",\"/home/albara/Desktop/Repositories/Quickster/src/Map.js\",\"/home/albara/Desktop/Repositories/Quickster/src/serviceWorker.js\",\"/home/albara/Desktop/Repositories/Quickster/src/index.js\"],\"names\":[\"module\",\"exports\",\"ButtonToggle\",\"_Component\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"toggle\",\"setState\",\"dropdownOpen\",\"state\",\"toggleButton1\",\"on\",\"on2\",\"on3\",\"on4\",\"currentClick\",\"toggleButton2\",\"toggleButton3\",\"toggleButton4\",\"msg\",\"message\",\"numItems\",\"start\",\"first\",\"second\",\"third\",\"fourth\",\"inherits\",\"createClass\",\"key\",\"value\",\"_this2\",\"console\",\"log\",\"react_default\",\"a\",\"createElement\",\"react_google_location\",\"id\",\"apiKey\",\"apikey\",\"language\",\"country\",\"coordinates\",\"locationBoxStyle\",\"locationListStyle\",\"onChange\",\"e\",\"ButtonDropdown\",\"isOpen\",\"DropdownToggle\",\"caret\",\"DropdownMenu\",\"DropdownItem\",\"onClick\",\"className\",\"type\",\"Component\",\"App\",\"ButtonToggle_ButtonToggle\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"const apikey = \\\"AIzaSyCkF2kq7ElyH4OtWelckXaKktYWqIi86dU\\\";\\n\\nmodule.exports = apikey;\",\"import React, { Component } from 'react'\\nimport './ButtonToggle.css';\\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\\n//import { Input } from 'reactstrap';\\n//import { Container, Segment} from \\\"semantic-ui-react\\\";\\n//import PlacesAutocomplete, { geocodeByAddress, getLatLng, } from 'react-places-autocomplete';\\nimport { GoogleComponent } from 'react-google-location' \\nimport apikey from './google_api_key'\\n\\nexport class ButtonToggle extends Component {\\n    constructor(props) {\\n        super(props);\\n    \\n        // this.toggle = this.toggle.bind(this);\\n        this.state = {\\n          dropdownOpen: false,\\n          msg: props.message,\\n          numItems : 4,\\n          currentClick: 0,\\n          on: false,\\n          on2: false,\\n          on3: false,\\n          on4: false,\\n          start: null,\\n          first: null,\\n          second: null,\\n          third: null,\\n          fourth: null,\\n        };\\n      }\\n    \\n    toggle = () =>  {\\n        \\n      this.setState({\\n          dropdownOpen: !this.state.dropdownOpen\\n        });\\n      }\\n\\n    toggleButton1 = () => {\\n        this.setState({\\n            on:  true,\\n            on2: false,\\n            on3: false,\\n            on4: false,\\n            currentClick: 1,\\n        });\\n    }\\n\\n    toggleButton2 = () => {\\n        this.setState({\\n            on: true,\\n            on2: true,\\n            on3: false,\\n            on4: false,\\n            currentClick: 2,\\n        });\\n\\n        \\n    }\\n\\n    toggleButton3 = () => {\\n        this.setState({\\n            on: true,\\n            on2:true,\\n            on3:true,\\n            on4:false,\\n            currentClick: 3,\\n        });\\n    }\\n\\n    toggleButton4 = () => {\\n        this.setState({\\n            on: true,\\n            on2:true,\\n            on3:true,\\n            on4:true,\\n            currentClick: 4,\\n        });\\n    }\\n\\n  render() {\\n      const {message} = this.props\\n      console.log(this.props)\\n    return (\\n      <div>\\n        <h2>Please enter a starting address</h2>\\n        {/* <Input className= \\\"input\\\" id = \\\"inputStart\\\" placeholder=\\\"Starting Address\\\"></Input> */}\\n        <GoogleComponent\\n            id = \\\"inputStart\\\"\\n            apiKey={apikey}\\n            language={'en'}\\n            country={'country:in|country:us'}\\n            coordinates={true}\\n            locationBoxStyle={'input'}\\n            locationListStyle={'slide'}\\n            onChange={(e) => { this.setState({ start: e }) }} />\\n        <p>Please choose the amount of address:</p>\\n        \\n        <ButtonDropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\\n        <DropdownToggle caret>\\n          {message}\\n        </DropdownToggle>\\n        <DropdownMenu>\\n            {/* {\\n                Array(this.state.numItems).fill(0).map( (_, i) => <DropdownItem key={i} onClick={this.toggleButton} >{i + 1 }</DropdownItem>)\\n            } */}\\n          <DropdownItem onClick ={this.toggleButton1}>1</DropdownItem>\\n          <DropdownItem onClick ={this.toggleButton2}>2</DropdownItem>\\n          <DropdownItem onClick ={this.toggleButton3}>3</DropdownItem>\\n          <DropdownItem onClick ={this.toggleButton4}>4</DropdownItem>\\n        </DropdownMenu>\\n      </ButtonDropdown>\\n         <div className =\\\"inputG\\\">\\n             {this.state.on && <GoogleComponent \\n             apiKey={apikey} \\n             id = \\\"input1\\\" language={'en'} country={'country:in|country:us'} coordinates={true} locationBoxStyle={'inputA'}locationListStyle={'slide'}\\n             onChange={(e) => { this.setState({ first: e }) }} />}\\n\\n            {this.state.on2 && <GoogleComponent \\n             apiKey={apikey} \\n             id = \\\"input2\\\" language={'en'} country={'country:in|country:us'} coordinates={true} locationBoxStyle={'inputA'}locationListStyle={'slide'}\\n             onChange={(e) => { this.setState({ second: e }) }} />}\\n\\n            {this.state.on3 && <GoogleComponent \\n             apiKey={apikey} \\n             id = \\\"input3\\\" language={'en'} country={'country:in|country:us'} coordinates={true} locationBoxStyle={'inputA'}locationListStyle={'slide'}\\n             onChange={(e) => { this.setState({ third: e }) }} />}\\n\\n            {this.state.on4 && <GoogleComponent \\n             apiKey={apikey} \\n             id = \\\"input4\\\" language={'en'} country={'country:in|country:us'} coordinates={true} locationBoxStyle={'inputA'}locationListStyle={'slide'}\\n             onChange={(e) => { this.setState({ fourth: e }) }} />}\\n        </div>\\n\\n        <button type=\\\"submit\\\">\\n        Submit\\n        </button>\\n      </div>\\n    )\\n  }\\n} \\n\\n// //Source: https://github.com/hibiken/react-places-autocomplete?fbclid=IwAR03LOgSodZOcy2mxnpt7XjGlGT0cc7w5HXd-eNeAOy25Oi3sgyvSL9R-3Q\\n// class LocationSearchInput extends React.Component {\\n//   constructor(props) {\\n//     super(props);\\n//     this.state = { address: '' };\\n//   }\\n\\n//   handleChange = address => {\\n//     this.setState({ address });\\n//   };\\n\\n//   handleSelect = address => {\\n//     geocodeByAddress(address)\\n//       .then(results => getLatLng(results[0]))\\n//       .then(latLng => console.log('Success', latLng))\\n//       .catch(error => console.error('Error', error));\\n//   };\\n\\n//   render() {\\n//     return (\\n//       <PlacesAutocomplete\\n//         value={this.state.address}\\n//         onChange={this.handleChange}\\n//         onSelect={this.handleSelect}\\n//       >\\n//         {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\\n//           <div>\\n//             <input\\n//               {...getInputProps({\\n//                 placeholder: 'Search Places ...',\\n//                 className: 'location-search-input',\\n//               })}\\n//             />\\n//             <div className=\\\"autocomplete-dropdown-container\\\">\\n//               {loading && <div>Loading...</div>}\\n//               {suggestions.map(suggestion => {\\n//                 const className = suggestion.active\\n//                   ? 'suggestion-item--active'\\n//                   : 'suggestion-item';\\n//                 // inline style for demonstration purpose\\n//                 const style = suggestion.active\\n//                   ? { backgroundColor: '#fafafa', cursor: 'pointer' }\\n//                   : { backgroundColor: '#ffffff', cursor: 'pointer' };\\n//                 return (\\n//                   <div\\n//                     {...getSuggestionItemProps(suggestion, {\\n//                       className,\\n//                       style,\\n//                     })}\\n//                   >\\n//                     <span>{suggestion.description}</span>\\n//                   </div>\\n//                 );\\n//               })}\\n//             </div>\\n//           </div>\\n//         )}\\n//       </PlacesAutocomplete>\\n//     );\\n//   }\\n// }\\n\\nfunction checker() {\\n\\n}\",\"import React, { Component } from 'react';\\nimport './App.css';\\nimport { ButtonToggle } from './ButtonToggle'\\nimport { MapContainer } from './Map.js'\\nimport { apiKey } from'./google_api_key.js'\\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\\n//import { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <header className=\\\"App-header\\\">\\n        <ButtonToggle message = \\\"Choose...\\\"/>\\n        </header>\\n        {/* <MapContainer/> */}\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\\n// export default GoogleApiWrapper({\\n//   apiKey: (apiKey)\\n// })(MapContainer)\\n\",\"import React, { Component } from 'react'\\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\\n\\nexport class MapContainer extends Component {\\n  render() {\\n    return (\\n      <div>\\n        <Map google={this.props.google} zoom={14}>\\n        <Marker onClick={this.onMarkerClick}\\n                name={'Current location'} />\\n        <InfoWindow onClose={this.onInfoWindowClose}>\\n            <div>\\n              <h1>{this.state.selectedPlace.name}</h1>\\n            </div>\\n        </InfoWindow>\\n        </Map>         \\n      </div>\\n    )\\n  }\\n}\\n\\n\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(t,e){t.exports=\"AIzaSyCkF2kq7ElyH4OtWelckXaKktYWqIi86dU\"},26:function(t,e,n){t.exports=n(53)},31:function(t,e,n){},32:function(t,e,n){},33:function(t,e,n){},53:function(t,e,n){\"use strict\";n.r(e);var o=n(1),a=n.n(o),i=n(8),c=n.n(i),l=(n(31),n(9)),r=n(10),s=n(13),u=n(11),d=n(14),g=(n(32),n(33),n(57)),p=n(58),m=n(56),h=n(55),y=n(17),f=n(15),E=n.n(f),S=function(t){function e(t){var n;return Object(l.a)(this,e),(n=Object(s.a)(this,Object(u.a)(e).call(this,t))).toggle=function(){n.setState({dropdownOpen:!n.state.dropdownOpen})},n.toggleButton1=function(){n.setState({on:!0,on2:!1,on3:!1,on4:!1,currentClick:1})},n.toggleButton2=function(){n.setState({on:!0,on2:!0,on3:!1,on4:!1,currentClick:2})},n.toggleButton3=function(){n.setState({on:!0,on2:!0,on3:!0,on4:!1,currentClick:3})},n.toggleButton4=function(){n.setState({on:!0,on2:!0,on3:!0,on4:!0,currentClick:4})},n.state={dropdownOpen:!1,msg:t.message,numItems:4,currentClick:0,on:!1,on2:!1,on3:!1,on4:!1,start:null,first:null,second:null,third:null,fourth:null},n}return Object(d.a)(e,t),Object(r.a)(e,[{key:\"render\",value:function(){var t=this,e=this.props.message;return console.log(this.props),a.a.createElement(\"div\",null,a.a.createElement(\"h2\",null,\"Please enter a starting address\"),a.a.createElement(y.a,{id:\"inputStart\",apiKey:E.a,language:\"en\",country:\"country:in|country:us\",coordinates:!0,locationBoxStyle:\"input\",locationListStyle:\"slide\",onChange:function(e){t.setState({start:e})}}),a.a.createElement(\"p\",null,\"Please choose the amount of address:\"),a.a.createElement(g.a,{isOpen:this.state.dropdownOpen,toggle:this.toggle},a.a.createElement(p.a,{caret:!0},e),a.a.createElement(m.a,null,a.a.createElement(h.a,{onClick:this.toggleButton1},\"1\"),a.a.createElement(h.a,{onClick:this.toggleButton2},\"2\"),a.a.createElement(h.a,{onClick:this.toggleButton3},\"3\"),a.a.createElement(h.a,{onClick:this.toggleButton4},\"4\"))),a.a.createElement(\"div\",{className:\"inputG\"},this.state.on&&a.a.createElement(y.a,{apiKey:E.a,id:\"input1\",language:\"en\",country:\"country:in|country:us\",coordinates:!0,locationBoxStyle:\"inputA\",locationListStyle:\"slide\",onChange:function(e){t.setState({first:e})}}),this.state.on2&&a.a.createElement(y.a,{apiKey:E.a,id:\"input2\",language:\"en\",country:\"country:in|country:us\",coordinates:!0,locationBoxStyle:\"inputA\",locationListStyle:\"slide\",onChange:function(e){t.setState({second:e})}}),this.state.on3&&a.a.createElement(y.a,{apiKey:E.a,id:\"input3\",language:\"en\",country:\"country:in|country:us\",coordinates:!0,locationBoxStyle:\"inputA\",locationListStyle:\"slide\",onChange:function(e){t.setState({third:e})}}),this.state.on4&&a.a.createElement(y.a,{apiKey:E.a,id:\"input4\",language:\"en\",country:\"country:in|country:us\",coordinates:!0,locationBoxStyle:\"inputA\",locationListStyle:\"slide\",onChange:function(e){t.setState({fourth:e})}})),a.a.createElement(\"button\",{type:\"submit\"},\"Submit\"))}}]),e}(o.Component);var k=n(19),C=(o.Component,function(t){function e(){return Object(l.a)(this,e),Object(s.a)(this,Object(u.a)(e).apply(this,arguments))}return Object(d.a)(e,t),Object(r.a)(e,[{key:\"render\",value:function(){return a.a.createElement(\"div\",{className:\"App\"},a.a.createElement(\"header\",{className:\"App-header\"},a.a.createElement(S,{message:\"Choose...\"})))}}]),e}(o.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(a.a.createElement(C,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(t){t.unregister()})}},[[26,1,2]]]);","extractedComments":[]}